# Courtesy of: https://nedbatchelder.com/blog/200704/my_pdbrc.html
# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
alias p_ for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("%2", k, repr(%1[k]))

# Print the member variables of a thing.
alias pi p_ %1.__dict__ %1.

# Print the member variables of self.
alias ps pi self

# Print the locals.
alias pl p_ locals() local:

# Next and list, and step and list.
alias nl n;;l
alias sl s;;l

# Print contents of an object's class (including bases).
alias pc for k,v in sorted({k:v for cls in reversed(%1.__class__.__mro__) for k,v in cls.__dict__.items() if cls is not object}.items()): print("%s%-20s= %-80.80s" % ("%1.",k,repr(v)))
# (Courtesy: https://greek0.net/blog/2015/05/28/neat_python_debugger_command/)

# # Courtesy: http://code.activestate.com/recipes/498182/
# import os
# import sys
# # import rlcompleter early, as it contains side effects
# import rlcompleter
# # refresh the terminal
# os.system("stty sane")
# # this rc file takes single lines, so define our complete function here
# execfile(os.path.expanduser("~/.config/pdb/pdbrc.py"))
# # replace the Pdb class's complete method with ours
# sys._getframe(1).f_globals['Pdb'].complete = complete
# # set use_rawinput to 1 as tab completion relies on rawinput being used
# sys._getframe(1).f_locals['self'].use_rawinput = 1
